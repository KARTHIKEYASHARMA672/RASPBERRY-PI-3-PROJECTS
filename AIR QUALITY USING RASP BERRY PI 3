TERMINAL COMMANDS :-
sudo apt update && sudo apt upgrade -y
sudo apt install python3-pip -y
sudo apt install python3-smbus i2c-tools -y
sudo raspi-config  # Enable I2C & SPI

pip3 install Adafruit_DHT RPLCD smbus2 requests spidev

---------------------------------------------------------------------------------------

CONNECTIONS :-

| Component Pin   | Raspberry Pi Pin (Physical)   | GPIO No. / Notes |
| --------------- | ----------------------------- | ---------------- |
| **DHT22 VCC**   | Pin 1 (3.3V)                  | —                |
| **DHT22 DATA**  | Pin 7                         | GPIO 4           |
| **DHT22 GND**   | Pin 6 (GND)                   | —                |
| **MQ-135 VCC**  | Pin 2 (5V)                    | —                |
| **MQ-135 GND**  | Pin 9 (GND)                   | —                |
| **MQ-135 AOUT** | MCP3008 CH0 (for analog read) | Needs MCP3008    |
| **LCD VCC**     | Pin 2 (5V)                    | —                |
| **LCD GND**     | Pin 6 (GND)                   | —                |
| **LCD SDA**     | Pin 3                         | GPIO 2           |
| **LCD SCL**     | Pin 5                         | GPIO 3           |

-------------------------------------------------------------------------------------------

CODE:-
import Adafruit_DHT
from RPLCD.i2c import CharLCD
import time
import requests
import smtplib
from email.mime.text import MIMEText
import spidev

# ThingSpeak details
API_KEY = "YOUR_API_KEY"
THINGSPEAK_URL = "https://api.thingspeak.com/update"

# Email details
SENDER_EMAIL = "your_email@gmail.com"
SENDER_PASSWORD = "your_password"
RECEIVER_EMAIL = "recipient_email@gmail.com"

# Pollution threshold (adjust as per calibration)
POLLUTION_THRESHOLD = 200  # Example value

# Setup DHT22
DHT_SENSOR = Adafruit_DHT.DHT22
DHT_PIN = 4

# Setup LCD
lcd = CharLCD('PCF8574', 0x27)
lcd.clear()

# Setup SPI for MCP3008 (MQ135)
spi = spidev.SpiDev()
spi.open(0, 0)
spi.max_speed_hz = 1350000

def read_adc(channel):
    if channel < 0 or channel > 7:
        return -1
    adc = spi.xfer2([1, (8 + channel) << 4, 0])
    data = ((adc[1] & 3) << 8) + adc[2]
    return data

def send_email_alert(aq_value):
    msg = MIMEText(f"Alert! High air pollution detected.\nAir Quality Value: {aq_value}")
    msg['Subject'] = "Air Pollution Alert"
    msg['From'] = SENDER_EMAIL
    msg['To'] = RECEIVER_EMAIL

    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        server.sendmail(SENDER_EMAIL, RECEIVER_EMAIL, msg.as_string())
        server.quit()
        print("Email alert sent successfully!")
    except Exception as e:
        print(f"Error sending email: {e}")

try:
    while True:
        humidity, temperature = Adafruit_DHT.read_retry(DHT_SENSOR, DHT_PIN)
        mq135_value = read_adc(0)  # MQ135 on channel 0

        if humidity is not None and temperature is not None:
            # Display values on LCD
            lcd.clear()
            lcd.write_string(f"T:{temperature:.1f}C H:{humidity:.1f}%")
            lcd.crlf()
            lcd.write_string(f"AQ:{mq135_value}")

            # Send to ThingSpeak
            params = {
                "api_key": API_KEY,
                "field1": temperature,
                "field2": humidity,
                "field3": mq135_value
            }
            requests.get(THINGSPEAK_URL, params=params)
            print(f"Sent: Temp={temperature:.1f}C, Hum={humidity:.1f}%, AQ={mq135_value}")

            # Check for pollution alert
            if mq135_value > POLLUTION_THRESHOLD:
                send_email_alert(mq135_value)

        else:
            lcd.clear()
            lcd.write_string("Sensor Error")
            print("Failed to read from DHT22")

        time.sleep(20)

except KeyboardInterrupt:
    lcd.clear()
    spi.close()
    print("\nProgram stopped")
---------------------------------------------------------------------------------------------
